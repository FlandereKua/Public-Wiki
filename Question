https://docs.google.com/document/d/19P5QiQhu_0Fx3LcogEGLak4YwHX-b_08c24ucP-oZ2s/edit?tab=t.0
You kinda cooked buddy LOLLMAO
# Claude Response
I'll help you build the "Wanderlust Vietnam" SwiftUI application step by step, following the MVVM architecture pattern. Here's the complete implementation:

## Project Structure

First, create these folders in your project:
- Models
- ViewModels
- Views
- Helpers

## Step 1: Models

### Destination.swift (in Models folder)
```swift
import Foundation

struct Destination: Codable, Identifiable {
    let id: Int
    let name: String
    let province: String
    let headline: String
    let description: String
    let imageName: String
    let galleryImages: [String]
}
```

### DestinationData.swift (SwiftData Model - in Models folder)
```swift
import Foundation
import SwiftData

@Model
final class DestinationData {
    var name: String
    var province: String
    var descriptionText: String
    var createdAt: Date
    
    init(name: String, province: String, descriptionText: String) {
        self.name = name
        self.province = province
        self.descriptionText = descriptionText
        self.createdAt = Date()
    }
}
```

## Step 2: ViewModels

### DestinationViewModel.swift (in ViewModels folder)
```swift
import Foundation
import SwiftUI

class DestinationViewModel: ObservableObject {
    @Published var destinations: [Destination] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    init() {
        loadDestinations()
    }
    
    func loadDestinations() {
        isLoading = true
        errorMessage = nil
        
        guard let url = Bundle.main.url(forResource: "destinations", withExtension: "json") else {
            errorMessage = "Could not find destinations.json file"
            isLoading = false
            return
        }
        
        do {
            let data = try Data(contentsOf: url)
            let decoder = JSONDecoder()
            destinations = try decoder.decode([Destination].self, from: data)
            isLoading = false
        } catch {
            errorMessage = "Failed to load destinations: \(error.localizedDescription)"
            isLoading = false
        }
    }
}
```

### SettingsViewModel.swift (in ViewModels folder)
```swift
import SwiftUI

class SettingsViewModel: ObservableObject {
    @AppStorage("isDarkMode") var isDarkMode: Bool = false
}
```

## Step 3: Main App File

### WanderlustVietnamApp.swift
```swift
import SwiftUI
import SwiftData

@main
struct WanderlustVietnamApp: App {
    @StateObject private var settingsViewModel = SettingsViewModel()
    
    var sharedModelContainer: ModelContainer = {
        let schema = Schema([
            DestinationData.self,
        ])
        let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: false)
        
        do {
            return try ModelContainer(for: schema, configurations: [modelConfiguration])
        } catch {
            fatalError("Could not create ModelContainer: \(error)")
        }
    }()
    
    var body: some Scene {
        WindowGroup {
            WelcomeView()
                .modelContainer(sharedModelContainer)
                .environmentObject(settingsViewModel)
                .preferredColorScheme(settingsViewModel.isDarkMode ? .dark : .light)
        }
    }
}
```

## Step 4: Views

### WelcomeView.swift (in Views folder)
```swift
import SwiftUI

struct WelcomeView: View {
    @State private var isRotating = false
    @State private var navigateToList = false
    
    var body: some View {
        NavigationStack {
            ZStack {
                Color("BackgroundColor")
                    .ignoresSafeArea()
                
                VStack(spacing: 30) {
                    Spacer()
                    
                    // App Logo with rotation animation
                    Image("app-logo") // Make sure you have this image in Assets
                        .resizable()
                        .scaledToFit()
                        .frame(width: 150, height: 150)
                        .rotationEffect(.degrees(isRotating ? 360 : 0))
                        .animation(.linear(duration: 2).repeatForever(autoreverses: false), value: isRotating)
                        .onTapGesture {
                            isRotating.toggle()
                        }
                    
                    // App Name
                    Text("Wanderlust Vietnam")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(Color("BrandPrimary"))
                    
                    // Student Info with custom font
                    VStack(spacing: 10) {
                        Text("Your Full Name") // Replace with your actual name
                            .font(.custom("Sacramento-Regular", size: 28))
                            .foregroundColor(Color("BrandSecondary"))
                        
                        Text("Student ID: 12345678") // Replace with your actual ID
                            .font(.custom("Sacramento-Regular", size: 24))
                            .foregroundColor(Color("BrandSecondary"))
                    }
                    
                    Spacer()
                    
                    // Explore Button
                    NavigationLink(destination: DestinationListView()) {
                        Text("Explore Destinations")
                            .font(.headline)
                            .foregroundColor(.white)
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color("BrandPrimary"))
                            .cornerRadius(10)
                            .padding(.horizontal, 40)
                    }
                    
                    Spacer()
                }
            }
            .navigationBarHidden(true)
        }
    }
}
```

### DestinationListView.swift (in Views folder)
```swift
import SwiftUI
import SwiftData

struct DestinationListView: View {
    @StateObject private var viewModel = DestinationViewModel()
    @State private var showingSettings = false
    @State private var showingAddDestination = false
    @Query private var userDestinations: [DestinationData]
    
    var body: some View {
        NavigationView {
            List {
                // JSON Destinations Section
                if !viewModel.destinations.isEmpty {
                    Section(header: Text("Featured Destinations")) {
                        ForEach(viewModel.destinations) { destination in
                            NavigationLink(destination: DestinationDetailView(destination: destination)) {
                                DestinationRowView(destination: destination)
                            }
                        }
                    }
                }
                
                // User Created Destinations Section
                if !userDestinations.isEmpty {
                    Section(header: Text("My Destinations")) {
                        ForEach(userDestinations) { userDestination in
                            NavigationLink(destination: UserDestinationDetailView(destination: userDestination)) {
                                UserDestinationRowView(destination: userDestination)
                            }
                        }
                    }
                }
            }
            .navigationTitle("Destinations")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    HStack {
                        Button(action: {
                            showingAddDestination = true
                        }) {
                            Image(systemName: "plus")
                        }
                        
                        Button(action: {
                            showingSettings = true
                        }) {
                            Image(systemName: "gearshape")
                        }
                    }
                }
            }
            .sheet(isPresented: $showingSettings) {
                SettingsView()
            }
            .sheet(isPresented: $showingAddDestination) {
                AddDestinationView()
            }
            .accentColor(Color("BrandPrimary"))
        }
    }
}

struct DestinationRowView: View {
    let destination: Destination
    
    var body: some View {
        HStack {
            Image(destination.imageName)
                .resizable()
                .scaledToFill()
                .frame(width: 70, height: 70)
                .clipShape(RoundedRectangle(cornerRadius: 8))
            
            VStack(alignment: .leading, spacing: 4) {
                Text(destination.name)
                    .font(.headline)
                    .foregroundColor(Color("BrandPrimary"))
                
                Text(destination.headline)
                    .font(.caption)
                    .foregroundColor(Color("BrandSecondary"))
                    .lineLimit(2)
            }
            
            Spacer()
        }
        .padding(.vertical, 4)
    }
}

struct UserDestinationRowView: View {
    let destination: DestinationData
    
    var body: some View {
        HStack {
            Image(systemName: "mappin.circle.fill")
                .resizable()
                .scaledToFit()
                .frame(width: 70, height: 70)
                .foregroundColor(Color("BrandSecondary"))
            
            VStack(alignment: .leading, spacing: 4) {
                Text(destination.name)
                    .font(.headline)
                    .foregroundColor(Color("BrandPrimary"))
                
                Text(destination.province)
                    .font(.caption)
                    .foregroundColor(Color("BrandSecondary"))
            }
            
            Spacer()
        }
        .padding(.vertical, 4)
    }
}
```

### DestinationDetailView.swift (in Views folder)
```swift
import SwiftUI

struct DestinationDetailView: View {
    let destination: Destination
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                // Main Image
                Image(destination.imageName)
                    .resizable()
                    .scaledToFit()
                    .frame(maxWidth: .infinity)
                
                VStack(alignment: .leading, spacing: 10) {
                    // Name
                    Text(destination.name)
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(Color("BrandPrimary"))
                    
                    // Province
                    Text(destination.province)
                        .font(.title3)
                        .foregroundColor(Color("BrandSecondary"))
                    
                    Divider()
                    
                    // Description
                    Text(destination.description)
                        .font(.body)
                        .multilineTextAlignment(.leading)
                    
                    // Gallery
                    if !destination.galleryImages.isEmpty {
                        Text("Gallery")
                            .font(.headline)
                            .padding(.top)
                        
                        ScrollView(.horizontal, showsIndicators: false) {
                            HStack(spacing: 15) {
                                ForEach(destination.galleryImages, id: \.self) { imageName in
                                    Image(imageName)
                                        .resizable()
                                        .scaledToFill()
                                        .frame(width: 200, height: 150)
                                        .clipShape(RoundedRectangle(cornerRadius: 12))
                                        .shadow(radius: 4)
                                }
                            }
                        }
                    }
                }
                .padding(.horizontal)
            }
        }
        .background(Color("BackgroundColor"))
        .navigationBarTitleDisplayMode(.inline)
    }
}

struct UserDestinationDetailView: View {
    let destination: DestinationData
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                VStack(alignment: .leading, spacing: 10) {
                    // Name
                    Text(destination.name)
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(Color("BrandPrimary"))
                    
                    // Province
                    Text(destination.province)
                        .font(.title3)
                        .foregroundColor(Color("BrandSecondary"))
                    
                    Divider()
                    
                    // Description
                    Text(destination.descriptionText)
                        .font(.body)
                        .multilineTextAlignment(.leading)
                }
                .padding(.horizontal)
            }
            .padding(.top)
        }
        .background(Color("BackgroundColor"))
        .navigationBarTitleDisplayMode(.inline)
    }
}
```

### SettingsView.swift (in Views folder)
```swift
import SwiftUI

struct SettingsView: View {
    @EnvironmentObject var settingsViewModel: SettingsViewModel
    @Environment(\.dismiss) var dismiss
    
    var body: some View {
        NavigationView {
            Form {
                Section {
                    Toggle("Enable Dark Mode", isOn: $settingsViewModel.isDarkMode)
                }
            }
            .navigationTitle("Settings")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                    .foregroundColor(Color("BrandPrimary"))
                }
            }
            .accentColor(Color("BrandPrimary"))
        }
    }
}
```

### AddDestinationView.swift (in Views folder)
```swift
import SwiftUI
import SwiftData

struct AddDestinationView: View {
    @Environment(\.modelContext) private var modelContext
    @Environment(\.dismiss) private var dismiss
    
    @State private var name = ""
    @State private var province = ""
    @State private var description = ""
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Destination Details")) {
                    TextField("Name", text: $name)
                    TextField("Province", text: $province)
                }
                
                Section(header: Text("Description")) {
                    TextEditor(text: $description)
                        .frame(minHeight: 100)
                }
            }
            .navigationTitle("Add Destination")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        saveDestination()
                    }
                    .disabled(name.isEmpty || province.isEmpty || description.isEmpty)
                }
            }
        }
    }
    
    private func saveDestination() {
        let newDestination = DestinationData(
            name: name,
            province: province,
            descriptionText: description
        )
        
        modelContext.insert(newDestination)
        
        do {
            try modelContext.save()
            dismiss()
        } catch {
            print("Failed to save destination: \(error)")
        }
    }
}
```

## Step 5: Color Configuration

In your Assets.xcassets, create these Color Sets:

1. **BrandPrimary**:
   - Any Appearance: #922B21
   - Dark Appearance: #E74C3C

2. **BrandSecondary**:
   - Any Appearance: #1F4E79
   - Dark Appearance: #5DADE2

3. **BackgroundColor**:
   - Any Appearance: #D5DBDB
   - Dark Appearance: #1C2833

## Important Notes:

1. Make sure to add the Sacramento font file to your project and include it in your Info.plist under "Fonts provided by application"
2. Add all destination images to your Assets catalog with 1x, 2x, and 3x versions
3. Place the destinations.json file in your project's main bundle
4. Configure your app icon for all variations (Light, Dark, Tinted)

This implementation follows MVVM architecture, includes all required functionality, and properly handles SwiftData integration for user-created destinations.
